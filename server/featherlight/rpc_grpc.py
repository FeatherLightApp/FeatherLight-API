# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: rpc.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import rpc_pb2


class WalletUnlockerBase(abc.ABC):

    @abc.abstractmethod
    async def GenSeed(self, stream: 'grpclib.server.Stream[rpc_pb2.GenSeedRequest, rpc_pb2.GenSeedResponse]') -> None:
        pass

    @abc.abstractmethod
    async def InitWallet(self, stream: 'grpclib.server.Stream[rpc_pb2.InitWalletRequest, rpc_pb2.InitWalletResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UnlockWallet(self, stream: 'grpclib.server.Stream[rpc_pb2.UnlockWalletRequest, rpc_pb2.UnlockWalletResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ChangePassword(self, stream: 'grpclib.server.Stream[rpc_pb2.ChangePasswordRequest, rpc_pb2.ChangePasswordResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/lnrpc.WalletUnlocker/GenSeed': grpclib.const.Handler(
                self.GenSeed,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.GenSeedRequest,
                rpc_pb2.GenSeedResponse,
            ),
            '/lnrpc.WalletUnlocker/InitWallet': grpclib.const.Handler(
                self.InitWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.InitWalletRequest,
                rpc_pb2.InitWalletResponse,
            ),
            '/lnrpc.WalletUnlocker/UnlockWallet': grpclib.const.Handler(
                self.UnlockWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.UnlockWalletRequest,
                rpc_pb2.UnlockWalletResponse,
            ),
            '/lnrpc.WalletUnlocker/ChangePassword': grpclib.const.Handler(
                self.ChangePassword,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ChangePasswordRequest,
                rpc_pb2.ChangePasswordResponse,
            ),
        }


class WalletUnlockerStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GenSeed = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.WalletUnlocker/GenSeed',
            rpc_pb2.GenSeedRequest,
            rpc_pb2.GenSeedResponse,
        )
        self.InitWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.WalletUnlocker/InitWallet',
            rpc_pb2.InitWalletRequest,
            rpc_pb2.InitWalletResponse,
        )
        self.UnlockWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.WalletUnlocker/UnlockWallet',
            rpc_pb2.UnlockWalletRequest,
            rpc_pb2.UnlockWalletResponse,
        )
        self.ChangePassword = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.WalletUnlocker/ChangePassword',
            rpc_pb2.ChangePasswordRequest,
            rpc_pb2.ChangePasswordResponse,
        )


class LightningBase(abc.ABC):

    @abc.abstractmethod
    async def WalletBalance(self, stream: 'grpclib.server.Stream[rpc_pb2.WalletBalanceRequest, rpc_pb2.WalletBalanceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ChannelBalance(self, stream: 'grpclib.server.Stream[rpc_pb2.ChannelBalanceRequest, rpc_pb2.ChannelBalanceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetTransactions(self, stream: 'grpclib.server.Stream[rpc_pb2.GetTransactionsRequest, rpc_pb2.TransactionDetails]') -> None:
        pass

    @abc.abstractmethod
    async def EstimateFee(self, stream: 'grpclib.server.Stream[rpc_pb2.EstimateFeeRequest, rpc_pb2.EstimateFeeResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SendCoins(self, stream: 'grpclib.server.Stream[rpc_pb2.SendCoinsRequest, rpc_pb2.SendCoinsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListUnspent(self, stream: 'grpclib.server.Stream[rpc_pb2.ListUnspentRequest, rpc_pb2.ListUnspentResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeTransactions(self, stream: 'grpclib.server.Stream[rpc_pb2.GetTransactionsRequest, rpc_pb2.Transaction]') -> None:
        pass

    @abc.abstractmethod
    async def SendMany(self, stream: 'grpclib.server.Stream[rpc_pb2.SendManyRequest, rpc_pb2.SendManyResponse]') -> None:
        pass

    @abc.abstractmethod
    async def NewAddress(self, stream: 'grpclib.server.Stream[rpc_pb2.NewAddressRequest, rpc_pb2.NewAddressResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SignMessage(self, stream: 'grpclib.server.Stream[rpc_pb2.SignMessageRequest, rpc_pb2.SignMessageResponse]') -> None:
        pass

    @abc.abstractmethod
    async def VerifyMessage(self, stream: 'grpclib.server.Stream[rpc_pb2.VerifyMessageRequest, rpc_pb2.VerifyMessageResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ConnectPeer(self, stream: 'grpclib.server.Stream[rpc_pb2.ConnectPeerRequest, rpc_pb2.ConnectPeerResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DisconnectPeer(self, stream: 'grpclib.server.Stream[rpc_pb2.DisconnectPeerRequest, rpc_pb2.DisconnectPeerResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListPeers(self, stream: 'grpclib.server.Stream[rpc_pb2.ListPeersRequest, rpc_pb2.ListPeersResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribePeerEvents(self, stream: 'grpclib.server.Stream[rpc_pb2.PeerEventSubscription, rpc_pb2.PeerEvent]') -> None:
        pass

    @abc.abstractmethod
    async def GetInfo(self, stream: 'grpclib.server.Stream[rpc_pb2.GetInfoRequest, rpc_pb2.GetInfoResponse]') -> None:
        pass

    @abc.abstractmethod
    async def PendingChannels(self, stream: 'grpclib.server.Stream[rpc_pb2.PendingChannelsRequest, rpc_pb2.PendingChannelsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListChannels(self, stream: 'grpclib.server.Stream[rpc_pb2.ListChannelsRequest, rpc_pb2.ListChannelsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeChannelEvents(self, stream: 'grpclib.server.Stream[rpc_pb2.ChannelEventSubscription, rpc_pb2.ChannelEventUpdate]') -> None:
        pass

    @abc.abstractmethod
    async def ClosedChannels(self, stream: 'grpclib.server.Stream[rpc_pb2.ClosedChannelsRequest, rpc_pb2.ClosedChannelsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OpenChannelSync(self, stream: 'grpclib.server.Stream[rpc_pb2.OpenChannelRequest, rpc_pb2.ChannelPoint]') -> None:
        pass

    @abc.abstractmethod
    async def OpenChannel(self, stream: 'grpclib.server.Stream[rpc_pb2.OpenChannelRequest, rpc_pb2.OpenStatusUpdate]') -> None:
        pass

    @abc.abstractmethod
    async def FundingStateStep(self, stream: 'grpclib.server.Stream[rpc_pb2.FundingTransitionMsg, rpc_pb2.FundingStateStepResp]') -> None:
        pass

    @abc.abstractmethod
    async def ChannelAcceptor(self, stream: 'grpclib.server.Stream[rpc_pb2.ChannelAcceptResponse, rpc_pb2.ChannelAcceptRequest]') -> None:
        pass

    @abc.abstractmethod
    async def CloseChannel(self, stream: 'grpclib.server.Stream[rpc_pb2.CloseChannelRequest, rpc_pb2.CloseStatusUpdate]') -> None:
        pass

    @abc.abstractmethod
    async def AbandonChannel(self, stream: 'grpclib.server.Stream[rpc_pb2.AbandonChannelRequest, rpc_pb2.AbandonChannelResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SendPayment(self, stream: 'grpclib.server.Stream[rpc_pb2.SendRequest, rpc_pb2.SendResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SendPaymentSync(self, stream: 'grpclib.server.Stream[rpc_pb2.SendRequest, rpc_pb2.SendResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SendToRoute(self, stream: 'grpclib.server.Stream[rpc_pb2.SendToRouteRequest, rpc_pb2.SendResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SendToRouteSync(self, stream: 'grpclib.server.Stream[rpc_pb2.SendToRouteRequest, rpc_pb2.SendResponse]') -> None:
        pass

    @abc.abstractmethod
    async def AddInvoice(self, stream: 'grpclib.server.Stream[rpc_pb2.Invoice, rpc_pb2.AddInvoiceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListInvoices(self, stream: 'grpclib.server.Stream[rpc_pb2.ListInvoiceRequest, rpc_pb2.ListInvoiceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def LookupInvoice(self, stream: 'grpclib.server.Stream[rpc_pb2.PaymentHash, rpc_pb2.Invoice]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeInvoices(self, stream: 'grpclib.server.Stream[rpc_pb2.InvoiceSubscription, rpc_pb2.Invoice]') -> None:
        pass

    @abc.abstractmethod
    async def DecodePayReq(self, stream: 'grpclib.server.Stream[rpc_pb2.PayReqString, rpc_pb2.PayReq]') -> None:
        pass

    @abc.abstractmethod
    async def ListPayments(self, stream: 'grpclib.server.Stream[rpc_pb2.ListPaymentsRequest, rpc_pb2.ListPaymentsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteAllPayments(self, stream: 'grpclib.server.Stream[rpc_pb2.DeleteAllPaymentsRequest, rpc_pb2.DeleteAllPaymentsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DescribeGraph(self, stream: 'grpclib.server.Stream[rpc_pb2.ChannelGraphRequest, rpc_pb2.ChannelGraph]') -> None:
        pass

    @abc.abstractmethod
    async def GetNodeMetrics(self, stream: 'grpclib.server.Stream[rpc_pb2.NodeMetricsRequest, rpc_pb2.NodeMetricsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetChanInfo(self, stream: 'grpclib.server.Stream[rpc_pb2.ChanInfoRequest, rpc_pb2.ChannelEdge]') -> None:
        pass

    @abc.abstractmethod
    async def GetNodeInfo(self, stream: 'grpclib.server.Stream[rpc_pb2.NodeInfoRequest, rpc_pb2.NodeInfo]') -> None:
        pass

    @abc.abstractmethod
    async def QueryRoutes(self, stream: 'grpclib.server.Stream[rpc_pb2.QueryRoutesRequest, rpc_pb2.QueryRoutesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetNetworkInfo(self, stream: 'grpclib.server.Stream[rpc_pb2.NetworkInfoRequest, rpc_pb2.NetworkInfo]') -> None:
        pass

    @abc.abstractmethod
    async def StopDaemon(self, stream: 'grpclib.server.Stream[rpc_pb2.StopRequest, rpc_pb2.StopResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeChannelGraph(self, stream: 'grpclib.server.Stream[rpc_pb2.GraphTopologySubscription, rpc_pb2.GraphTopologyUpdate]') -> None:
        pass

    @abc.abstractmethod
    async def DebugLevel(self, stream: 'grpclib.server.Stream[rpc_pb2.DebugLevelRequest, rpc_pb2.DebugLevelResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FeeReport(self, stream: 'grpclib.server.Stream[rpc_pb2.FeeReportRequest, rpc_pb2.FeeReportResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateChannelPolicy(self, stream: 'grpclib.server.Stream[rpc_pb2.PolicyUpdateRequest, rpc_pb2.PolicyUpdateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ForwardingHistory(self, stream: 'grpclib.server.Stream[rpc_pb2.ForwardingHistoryRequest, rpc_pb2.ForwardingHistoryResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ExportChannelBackup(self, stream: 'grpclib.server.Stream[rpc_pb2.ExportChannelBackupRequest, rpc_pb2.ChannelBackup]') -> None:
        pass

    @abc.abstractmethod
    async def ExportAllChannelBackups(self, stream: 'grpclib.server.Stream[rpc_pb2.ChanBackupExportRequest, rpc_pb2.ChanBackupSnapshot]') -> None:
        pass

    @abc.abstractmethod
    async def VerifyChanBackup(self, stream: 'grpclib.server.Stream[rpc_pb2.ChanBackupSnapshot, rpc_pb2.VerifyChanBackupResponse]') -> None:
        pass

    @abc.abstractmethod
    async def RestoreChannelBackups(self, stream: 'grpclib.server.Stream[rpc_pb2.RestoreChanBackupRequest, rpc_pb2.RestoreBackupResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SubscribeChannelBackups(self, stream: 'grpclib.server.Stream[rpc_pb2.ChannelBackupSubscription, rpc_pb2.ChanBackupSnapshot]') -> None:
        pass

    @abc.abstractmethod
    async def BakeMacaroon(self, stream: 'grpclib.server.Stream[rpc_pb2.BakeMacaroonRequest, rpc_pb2.BakeMacaroonResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/lnrpc.Lightning/WalletBalance': grpclib.const.Handler(
                self.WalletBalance,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.WalletBalanceRequest,
                rpc_pb2.WalletBalanceResponse,
            ),
            '/lnrpc.Lightning/ChannelBalance': grpclib.const.Handler(
                self.ChannelBalance,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ChannelBalanceRequest,
                rpc_pb2.ChannelBalanceResponse,
            ),
            '/lnrpc.Lightning/GetTransactions': grpclib.const.Handler(
                self.GetTransactions,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.GetTransactionsRequest,
                rpc_pb2.TransactionDetails,
            ),
            '/lnrpc.Lightning/EstimateFee': grpclib.const.Handler(
                self.EstimateFee,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.EstimateFeeRequest,
                rpc_pb2.EstimateFeeResponse,
            ),
            '/lnrpc.Lightning/SendCoins': grpclib.const.Handler(
                self.SendCoins,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.SendCoinsRequest,
                rpc_pb2.SendCoinsResponse,
            ),
            '/lnrpc.Lightning/ListUnspent': grpclib.const.Handler(
                self.ListUnspent,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ListUnspentRequest,
                rpc_pb2.ListUnspentResponse,
            ),
            '/lnrpc.Lightning/SubscribeTransactions': grpclib.const.Handler(
                self.SubscribeTransactions,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.GetTransactionsRequest,
                rpc_pb2.Transaction,
            ),
            '/lnrpc.Lightning/SendMany': grpclib.const.Handler(
                self.SendMany,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.SendManyRequest,
                rpc_pb2.SendManyResponse,
            ),
            '/lnrpc.Lightning/NewAddress': grpclib.const.Handler(
                self.NewAddress,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.NewAddressRequest,
                rpc_pb2.NewAddressResponse,
            ),
            '/lnrpc.Lightning/SignMessage': grpclib.const.Handler(
                self.SignMessage,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.SignMessageRequest,
                rpc_pb2.SignMessageResponse,
            ),
            '/lnrpc.Lightning/VerifyMessage': grpclib.const.Handler(
                self.VerifyMessage,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.VerifyMessageRequest,
                rpc_pb2.VerifyMessageResponse,
            ),
            '/lnrpc.Lightning/ConnectPeer': grpclib.const.Handler(
                self.ConnectPeer,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ConnectPeerRequest,
                rpc_pb2.ConnectPeerResponse,
            ),
            '/lnrpc.Lightning/DisconnectPeer': grpclib.const.Handler(
                self.DisconnectPeer,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.DisconnectPeerRequest,
                rpc_pb2.DisconnectPeerResponse,
            ),
            '/lnrpc.Lightning/ListPeers': grpclib.const.Handler(
                self.ListPeers,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ListPeersRequest,
                rpc_pb2.ListPeersResponse,
            ),
            '/lnrpc.Lightning/SubscribePeerEvents': grpclib.const.Handler(
                self.SubscribePeerEvents,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.PeerEventSubscription,
                rpc_pb2.PeerEvent,
            ),
            '/lnrpc.Lightning/GetInfo': grpclib.const.Handler(
                self.GetInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.GetInfoRequest,
                rpc_pb2.GetInfoResponse,
            ),
            '/lnrpc.Lightning/PendingChannels': grpclib.const.Handler(
                self.PendingChannels,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.PendingChannelsRequest,
                rpc_pb2.PendingChannelsResponse,
            ),
            '/lnrpc.Lightning/ListChannels': grpclib.const.Handler(
                self.ListChannels,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ListChannelsRequest,
                rpc_pb2.ListChannelsResponse,
            ),
            '/lnrpc.Lightning/SubscribeChannelEvents': grpclib.const.Handler(
                self.SubscribeChannelEvents,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.ChannelEventSubscription,
                rpc_pb2.ChannelEventUpdate,
            ),
            '/lnrpc.Lightning/ClosedChannels': grpclib.const.Handler(
                self.ClosedChannels,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ClosedChannelsRequest,
                rpc_pb2.ClosedChannelsResponse,
            ),
            '/lnrpc.Lightning/OpenChannelSync': grpclib.const.Handler(
                self.OpenChannelSync,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.OpenChannelRequest,
                rpc_pb2.ChannelPoint,
            ),
            '/lnrpc.Lightning/OpenChannel': grpclib.const.Handler(
                self.OpenChannel,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.OpenChannelRequest,
                rpc_pb2.OpenStatusUpdate,
            ),
            '/lnrpc.Lightning/FundingStateStep': grpclib.const.Handler(
                self.FundingStateStep,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.FundingTransitionMsg,
                rpc_pb2.FundingStateStepResp,
            ),
            '/lnrpc.Lightning/ChannelAcceptor': grpclib.const.Handler(
                self.ChannelAcceptor,
                grpclib.const.Cardinality.STREAM_STREAM,
                rpc_pb2.ChannelAcceptResponse,
                rpc_pb2.ChannelAcceptRequest,
            ),
            '/lnrpc.Lightning/CloseChannel': grpclib.const.Handler(
                self.CloseChannel,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.CloseChannelRequest,
                rpc_pb2.CloseStatusUpdate,
            ),
            '/lnrpc.Lightning/AbandonChannel': grpclib.const.Handler(
                self.AbandonChannel,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.AbandonChannelRequest,
                rpc_pb2.AbandonChannelResponse,
            ),
            '/lnrpc.Lightning/SendPayment': grpclib.const.Handler(
                self.SendPayment,
                grpclib.const.Cardinality.STREAM_STREAM,
                rpc_pb2.SendRequest,
                rpc_pb2.SendResponse,
            ),
            '/lnrpc.Lightning/SendPaymentSync': grpclib.const.Handler(
                self.SendPaymentSync,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.SendRequest,
                rpc_pb2.SendResponse,
            ),
            '/lnrpc.Lightning/SendToRoute': grpclib.const.Handler(
                self.SendToRoute,
                grpclib.const.Cardinality.STREAM_STREAM,
                rpc_pb2.SendToRouteRequest,
                rpc_pb2.SendResponse,
            ),
            '/lnrpc.Lightning/SendToRouteSync': grpclib.const.Handler(
                self.SendToRouteSync,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.SendToRouteRequest,
                rpc_pb2.SendResponse,
            ),
            '/lnrpc.Lightning/AddInvoice': grpclib.const.Handler(
                self.AddInvoice,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.Invoice,
                rpc_pb2.AddInvoiceResponse,
            ),
            '/lnrpc.Lightning/ListInvoices': grpclib.const.Handler(
                self.ListInvoices,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ListInvoiceRequest,
                rpc_pb2.ListInvoiceResponse,
            ),
            '/lnrpc.Lightning/LookupInvoice': grpclib.const.Handler(
                self.LookupInvoice,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.PaymentHash,
                rpc_pb2.Invoice,
            ),
            '/lnrpc.Lightning/SubscribeInvoices': grpclib.const.Handler(
                self.SubscribeInvoices,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.InvoiceSubscription,
                rpc_pb2.Invoice,
            ),
            '/lnrpc.Lightning/DecodePayReq': grpclib.const.Handler(
                self.DecodePayReq,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.PayReqString,
                rpc_pb2.PayReq,
            ),
            '/lnrpc.Lightning/ListPayments': grpclib.const.Handler(
                self.ListPayments,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ListPaymentsRequest,
                rpc_pb2.ListPaymentsResponse,
            ),
            '/lnrpc.Lightning/DeleteAllPayments': grpclib.const.Handler(
                self.DeleteAllPayments,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.DeleteAllPaymentsRequest,
                rpc_pb2.DeleteAllPaymentsResponse,
            ),
            '/lnrpc.Lightning/DescribeGraph': grpclib.const.Handler(
                self.DescribeGraph,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ChannelGraphRequest,
                rpc_pb2.ChannelGraph,
            ),
            '/lnrpc.Lightning/GetNodeMetrics': grpclib.const.Handler(
                self.GetNodeMetrics,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.NodeMetricsRequest,
                rpc_pb2.NodeMetricsResponse,
            ),
            '/lnrpc.Lightning/GetChanInfo': grpclib.const.Handler(
                self.GetChanInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ChanInfoRequest,
                rpc_pb2.ChannelEdge,
            ),
            '/lnrpc.Lightning/GetNodeInfo': grpclib.const.Handler(
                self.GetNodeInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.NodeInfoRequest,
                rpc_pb2.NodeInfo,
            ),
            '/lnrpc.Lightning/QueryRoutes': grpclib.const.Handler(
                self.QueryRoutes,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.QueryRoutesRequest,
                rpc_pb2.QueryRoutesResponse,
            ),
            '/lnrpc.Lightning/GetNetworkInfo': grpclib.const.Handler(
                self.GetNetworkInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.NetworkInfoRequest,
                rpc_pb2.NetworkInfo,
            ),
            '/lnrpc.Lightning/StopDaemon': grpclib.const.Handler(
                self.StopDaemon,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.StopRequest,
                rpc_pb2.StopResponse,
            ),
            '/lnrpc.Lightning/SubscribeChannelGraph': grpclib.const.Handler(
                self.SubscribeChannelGraph,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.GraphTopologySubscription,
                rpc_pb2.GraphTopologyUpdate,
            ),
            '/lnrpc.Lightning/DebugLevel': grpclib.const.Handler(
                self.DebugLevel,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.DebugLevelRequest,
                rpc_pb2.DebugLevelResponse,
            ),
            '/lnrpc.Lightning/FeeReport': grpclib.const.Handler(
                self.FeeReport,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.FeeReportRequest,
                rpc_pb2.FeeReportResponse,
            ),
            '/lnrpc.Lightning/UpdateChannelPolicy': grpclib.const.Handler(
                self.UpdateChannelPolicy,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.PolicyUpdateRequest,
                rpc_pb2.PolicyUpdateResponse,
            ),
            '/lnrpc.Lightning/ForwardingHistory': grpclib.const.Handler(
                self.ForwardingHistory,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ForwardingHistoryRequest,
                rpc_pb2.ForwardingHistoryResponse,
            ),
            '/lnrpc.Lightning/ExportChannelBackup': grpclib.const.Handler(
                self.ExportChannelBackup,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ExportChannelBackupRequest,
                rpc_pb2.ChannelBackup,
            ),
            '/lnrpc.Lightning/ExportAllChannelBackups': grpclib.const.Handler(
                self.ExportAllChannelBackups,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ChanBackupExportRequest,
                rpc_pb2.ChanBackupSnapshot,
            ),
            '/lnrpc.Lightning/VerifyChanBackup': grpclib.const.Handler(
                self.VerifyChanBackup,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.ChanBackupSnapshot,
                rpc_pb2.VerifyChanBackupResponse,
            ),
            '/lnrpc.Lightning/RestoreChannelBackups': grpclib.const.Handler(
                self.RestoreChannelBackups,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.RestoreChanBackupRequest,
                rpc_pb2.RestoreBackupResponse,
            ),
            '/lnrpc.Lightning/SubscribeChannelBackups': grpclib.const.Handler(
                self.SubscribeChannelBackups,
                grpclib.const.Cardinality.UNARY_STREAM,
                rpc_pb2.ChannelBackupSubscription,
                rpc_pb2.ChanBackupSnapshot,
            ),
            '/lnrpc.Lightning/BakeMacaroon': grpclib.const.Handler(
                self.BakeMacaroon,
                grpclib.const.Cardinality.UNARY_UNARY,
                rpc_pb2.BakeMacaroonRequest,
                rpc_pb2.BakeMacaroonResponse,
            ),
        }


class LightningStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.WalletBalance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/WalletBalance',
            rpc_pb2.WalletBalanceRequest,
            rpc_pb2.WalletBalanceResponse,
        )
        self.ChannelBalance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ChannelBalance',
            rpc_pb2.ChannelBalanceRequest,
            rpc_pb2.ChannelBalanceResponse,
        )
        self.GetTransactions = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/GetTransactions',
            rpc_pb2.GetTransactionsRequest,
            rpc_pb2.TransactionDetails,
        )
        self.EstimateFee = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/EstimateFee',
            rpc_pb2.EstimateFeeRequest,
            rpc_pb2.EstimateFeeResponse,
        )
        self.SendCoins = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/SendCoins',
            rpc_pb2.SendCoinsRequest,
            rpc_pb2.SendCoinsResponse,
        )
        self.ListUnspent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ListUnspent',
            rpc_pb2.ListUnspentRequest,
            rpc_pb2.ListUnspentResponse,
        )
        self.SubscribeTransactions = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/SubscribeTransactions',
            rpc_pb2.GetTransactionsRequest,
            rpc_pb2.Transaction,
        )
        self.SendMany = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/SendMany',
            rpc_pb2.SendManyRequest,
            rpc_pb2.SendManyResponse,
        )
        self.NewAddress = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/NewAddress',
            rpc_pb2.NewAddressRequest,
            rpc_pb2.NewAddressResponse,
        )
        self.SignMessage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/SignMessage',
            rpc_pb2.SignMessageRequest,
            rpc_pb2.SignMessageResponse,
        )
        self.VerifyMessage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/VerifyMessage',
            rpc_pb2.VerifyMessageRequest,
            rpc_pb2.VerifyMessageResponse,
        )
        self.ConnectPeer = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ConnectPeer',
            rpc_pb2.ConnectPeerRequest,
            rpc_pb2.ConnectPeerResponse,
        )
        self.DisconnectPeer = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/DisconnectPeer',
            rpc_pb2.DisconnectPeerRequest,
            rpc_pb2.DisconnectPeerResponse,
        )
        self.ListPeers = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ListPeers',
            rpc_pb2.ListPeersRequest,
            rpc_pb2.ListPeersResponse,
        )
        self.SubscribePeerEvents = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/SubscribePeerEvents',
            rpc_pb2.PeerEventSubscription,
            rpc_pb2.PeerEvent,
        )
        self.GetInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/GetInfo',
            rpc_pb2.GetInfoRequest,
            rpc_pb2.GetInfoResponse,
        )
        self.PendingChannels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/PendingChannels',
            rpc_pb2.PendingChannelsRequest,
            rpc_pb2.PendingChannelsResponse,
        )
        self.ListChannels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ListChannels',
            rpc_pb2.ListChannelsRequest,
            rpc_pb2.ListChannelsResponse,
        )
        self.SubscribeChannelEvents = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/SubscribeChannelEvents',
            rpc_pb2.ChannelEventSubscription,
            rpc_pb2.ChannelEventUpdate,
        )
        self.ClosedChannels = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ClosedChannels',
            rpc_pb2.ClosedChannelsRequest,
            rpc_pb2.ClosedChannelsResponse,
        )
        self.OpenChannelSync = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/OpenChannelSync',
            rpc_pb2.OpenChannelRequest,
            rpc_pb2.ChannelPoint,
        )
        self.OpenChannel = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/OpenChannel',
            rpc_pb2.OpenChannelRequest,
            rpc_pb2.OpenStatusUpdate,
        )
        self.FundingStateStep = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/FundingStateStep',
            rpc_pb2.FundingTransitionMsg,
            rpc_pb2.FundingStateStepResp,
        )
        self.ChannelAcceptor = grpclib.client.StreamStreamMethod(
            channel,
            '/lnrpc.Lightning/ChannelAcceptor',
            rpc_pb2.ChannelAcceptResponse,
            rpc_pb2.ChannelAcceptRequest,
        )
        self.CloseChannel = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/CloseChannel',
            rpc_pb2.CloseChannelRequest,
            rpc_pb2.CloseStatusUpdate,
        )
        self.AbandonChannel = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/AbandonChannel',
            rpc_pb2.AbandonChannelRequest,
            rpc_pb2.AbandonChannelResponse,
        )
        self.SendPayment = grpclib.client.StreamStreamMethod(
            channel,
            '/lnrpc.Lightning/SendPayment',
            rpc_pb2.SendRequest,
            rpc_pb2.SendResponse,
        )
        self.SendPaymentSync = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/SendPaymentSync',
            rpc_pb2.SendRequest,
            rpc_pb2.SendResponse,
        )
        self.SendToRoute = grpclib.client.StreamStreamMethod(
            channel,
            '/lnrpc.Lightning/SendToRoute',
            rpc_pb2.SendToRouteRequest,
            rpc_pb2.SendResponse,
        )
        self.SendToRouteSync = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/SendToRouteSync',
            rpc_pb2.SendToRouteRequest,
            rpc_pb2.SendResponse,
        )
        self.AddInvoice = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/AddInvoice',
            rpc_pb2.Invoice,
            rpc_pb2.AddInvoiceResponse,
        )
        self.ListInvoices = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ListInvoices',
            rpc_pb2.ListInvoiceRequest,
            rpc_pb2.ListInvoiceResponse,
        )
        self.LookupInvoice = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/LookupInvoice',
            rpc_pb2.PaymentHash,
            rpc_pb2.Invoice,
        )
        self.SubscribeInvoices = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/SubscribeInvoices',
            rpc_pb2.InvoiceSubscription,
            rpc_pb2.Invoice,
        )
        self.DecodePayReq = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/DecodePayReq',
            rpc_pb2.PayReqString,
            rpc_pb2.PayReq,
        )
        self.ListPayments = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ListPayments',
            rpc_pb2.ListPaymentsRequest,
            rpc_pb2.ListPaymentsResponse,
        )
        self.DeleteAllPayments = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/DeleteAllPayments',
            rpc_pb2.DeleteAllPaymentsRequest,
            rpc_pb2.DeleteAllPaymentsResponse,
        )
        self.DescribeGraph = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/DescribeGraph',
            rpc_pb2.ChannelGraphRequest,
            rpc_pb2.ChannelGraph,
        )
        self.GetNodeMetrics = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/GetNodeMetrics',
            rpc_pb2.NodeMetricsRequest,
            rpc_pb2.NodeMetricsResponse,
        )
        self.GetChanInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/GetChanInfo',
            rpc_pb2.ChanInfoRequest,
            rpc_pb2.ChannelEdge,
        )
        self.GetNodeInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/GetNodeInfo',
            rpc_pb2.NodeInfoRequest,
            rpc_pb2.NodeInfo,
        )
        self.QueryRoutes = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/QueryRoutes',
            rpc_pb2.QueryRoutesRequest,
            rpc_pb2.QueryRoutesResponse,
        )
        self.GetNetworkInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/GetNetworkInfo',
            rpc_pb2.NetworkInfoRequest,
            rpc_pb2.NetworkInfo,
        )
        self.StopDaemon = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/StopDaemon',
            rpc_pb2.StopRequest,
            rpc_pb2.StopResponse,
        )
        self.SubscribeChannelGraph = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/SubscribeChannelGraph',
            rpc_pb2.GraphTopologySubscription,
            rpc_pb2.GraphTopologyUpdate,
        )
        self.DebugLevel = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/DebugLevel',
            rpc_pb2.DebugLevelRequest,
            rpc_pb2.DebugLevelResponse,
        )
        self.FeeReport = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/FeeReport',
            rpc_pb2.FeeReportRequest,
            rpc_pb2.FeeReportResponse,
        )
        self.UpdateChannelPolicy = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/UpdateChannelPolicy',
            rpc_pb2.PolicyUpdateRequest,
            rpc_pb2.PolicyUpdateResponse,
        )
        self.ForwardingHistory = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ForwardingHistory',
            rpc_pb2.ForwardingHistoryRequest,
            rpc_pb2.ForwardingHistoryResponse,
        )
        self.ExportChannelBackup = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ExportChannelBackup',
            rpc_pb2.ExportChannelBackupRequest,
            rpc_pb2.ChannelBackup,
        )
        self.ExportAllChannelBackups = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/ExportAllChannelBackups',
            rpc_pb2.ChanBackupExportRequest,
            rpc_pb2.ChanBackupSnapshot,
        )
        self.VerifyChanBackup = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/VerifyChanBackup',
            rpc_pb2.ChanBackupSnapshot,
            rpc_pb2.VerifyChanBackupResponse,
        )
        self.RestoreChannelBackups = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/RestoreChannelBackups',
            rpc_pb2.RestoreChanBackupRequest,
            rpc_pb2.RestoreBackupResponse,
        )
        self.SubscribeChannelBackups = grpclib.client.UnaryStreamMethod(
            channel,
            '/lnrpc.Lightning/SubscribeChannelBackups',
            rpc_pb2.ChannelBackupSubscription,
            rpc_pb2.ChanBackupSnapshot,
        )
        self.BakeMacaroon = grpclib.client.UnaryUnaryMethod(
            channel,
            '/lnrpc.Lightning/BakeMacaroon',
            rpc_pb2.BakeMacaroonRequest,
            rpc_pb2.BakeMacaroonResponse,
        )
