type User {
    """Password is only ever returned once, upon user creation. It is the clients responsiblity to store the password"""
    password: String
    """Username is only ever returned once, upon user creation. It is the clients responsibility to store the username"""
    username: String
    """Access token is a jwt which must be supplied in the header for authorized requests"""
    tokens: TokenPayload!
    balance: Int!
    btcAddress: String!
    invoices(paid: Boolean limit: Int): [UserInvoice]!
    payments(start: Int end: Int): [PaidInvoice]!
    deposits: [Deposit]!
    role: Role!
    created: Int!
}


type Error {
    errorType: ErrorType!
    message: String
}


type Deposit {
    address: String!
    amount: Int!
    confirmations: Int!
    blockhash: String!
    blockindex: Int!
    blocktime: Int!
    txid: String!
    time: Int!
    timereceived: Int!
    comment: String
}

type WalletBalance {
    totalBalance: Int!
    confirmedBalance: Int!
    unconfirmedBalance: Int!
}

type ChannelBalance {
    balance: Int!
    pendingOpenBalance: Int!
}

type NodeLiquidity {
    inbound: Int!
    outbound: Int!
}



# UNIMPLEMENTED

type RouteHint {
    hopHints: [HopHint]
}

type HopHint {
    nodeID: String
    chanID: Int
    feeBaseMsat: Int
    feePropMilionth: Int
    cltvExpiryDelta: Int
}

type FeaturesEntry {
    key: Int
    value: Feature
}

type Feature {
    name: String
    isRequired: Boolean
    isKnown: Boolean
}

type Route {
    totalTimeLock: Int!
    totalFees: Int!
    totalAmt: Int!
    #hops: [Hop]! TODO
}

type PeerInfo {
    id: Int!
    addr: String!
    conntime: Int!
    bytessent: Int!
    bytesrecv: Int!
    #TODO finish implementing https://bitcoin.org/en/developer-reference#getpeerinfo
}
