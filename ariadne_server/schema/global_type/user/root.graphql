union UserResponse = User | Error
union NewUserResponse = NewUser | Error
union FeedItem = Deposit | PaidInvoice | UserInvoice

interface BaseUser {
    balance: Int!
    btcAddress: String!
    invoices(paid: Boolean=true limit: Int=10 offset: Int): [UserInvoice]!
    payments(limit: Int=10 offset: Int): [PaidInvoice]!
    deposits(confirmations: Int=3): [Deposit]!
    feed(confirmations: Int=3 paid:Boolean=true expired:Boolean=true limit:Int=10 offset:Int): [FeedItem]!
    role: Role!
    created: Int! 
}


type NewUser implements BaseUser {
    """Password is only ever returned once, upon user creation. It is the clients responsiblity to store the password"""
    password: String!
    """Username is only ever returned once, upon user creation. It is the clients responsibility to store the username"""
    username: String!
    """Access token is a jwt which must be supplied in the header for authorized requests"""
    tokens: AuthPayload!
    balance: Int!
    btcAddress: String!
    invoices(paid: Boolean=true limit: Int=10 offset: Int): [UserInvoice]!
    payments(limit: Int=10 offset: Int): [PaidInvoice]!
    deposits(confirmations: Int=3): [Deposit]!
    feed(confirmations: Int=3 paid:Boolean=true expired:Boolean=true limit:Int=10 offset:Int): [FeedItem]!
    role: Role!
    created: Int!
}

type User implements BaseUser {
    """Access token is a jwt which must be supplied in the header for authorized requests"""
    balance: Int!
    btcAddress: String!
    invoices(paid: Boolean=true limit: Int=10 offset: Int): [UserInvoice]!
    payments(limit: Int=10 offset: Int): [PaidInvoice]!
    deposits(confirmations: Int=3): [Deposit]!
    feed(confirmations: Int=3 paid:Boolean=true expired:Boolean=true limit:Int=10 offset:Int): [FeedItem]!
    role: Role!
    created: Int! 
}


enum Role {
    USER
    ADMIN
}
