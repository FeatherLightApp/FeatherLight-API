type User {
    """Password is only ever returned once, upon user creation. It is the clients responsiblity to store the password"""
    password: String
    """Username is only ever returned once, upon user craetion. It is the clients responsibility to store the username"""
    username: String
    """Access token is a jwt which must be supplied in the header for authorized requests"""
    tokens: TokenPayload!
    balance: Int!
    btcAddress: String!
}


type Error {
    errorType: ErrorType!
    message: String
}

type WalletBalance {
    totalBalance: Int!
    confirmedBalance: Int!
}



union Invoice = LocalInvoice | RemoteInvoice

type LocalInvoice {
    destination: String
    paymentHash: String
    numSatoshis: Int
    timestamp: Int
    expiry: Int
    description: String
    fallbackAddress: String
    cltvExpiry: Int
    routeHints: [RouteHint]
    paymentAddress: String
    features: [FeaturesEntry]
}

type RouteHint {
    hopHints: [HopHint]
}

type HopHint {
    nodeID: String
    chanID: Int
    feeBaseMsat: Int
    feePropMilionth: Int
    cltvExpiryDelta: Int
}

type FeaturesEntry {
    key: Int
    value: Feature
}

type Feature {
    name: String
    isRequired: Boolean
    isKnown: Boolean
}

type RemoteInvoice {
    error: String
    preimage: String
    route: Route
    hash: String
    decoded: LocalInvoice
    payReq: String!
}

type Route {
    totalTimeLock: Int!
    totalFees: Int!
    totalAmt: Int!
    #hops: [Hop]! TODO
}

type PeerInfo {
    id: Int!
    addr: String!
    conntime: Int!
    bytessent: Int!
    bytesrecv: Int!
    #TODO finish implementing https://bitcoin.org/en/developer-reference#getpeerinfo
}